subreverse_sequence:

Написать функцию subreverse_sequence(sequence), принимающую список объектов Python. 
Функция должна возвращать кортеж, состоящий из элементов списка, стоящих на чётных местах, 
в обратном порядке (включая A[0]), после которых идут элементы списка, стоящие на нечётных местах. 
Использовать циклы запрещено!

Формат ввода
subreverse_sequence([0, 1, 2, 3, 4, 5, 6])

Формат вывода
(6, 4, 2, 0, 1, 3, 5)

Примечания
На проверку необходимо отправить файл subreverse_sequence.py с функцией subreverse_sequence(sequence).


find_max_substring_occurrence:

Написать функцию find_max_substring_occurrence(input_string), принимающую на вход непустую строку input_string. 
Функция должна возвращать наибольшее число k, такое что input_string совпадает с некоторой своей подстрокой t, 
выписанной k раз подряд.

Формат ввода
find_max_substring_occurrence('abab')

Формат вывода
2

Примечания
На проверку необходимо отправить файл find_max_substring_occurrence.py 
с функцией find_max_substring_occurrence(input_string).


find_word_in_circle

По кругу записано несколько букв (возможно, повторяющихся). Студент 317 группы хочет узнать, 
сможет ли он прочитать некоторое слово, если будет двигаться по кругу (в любом направлении), 
не пропуская буквы. Студент сам выбирает место, с которого он начинает читать, и направление. 
Необходимо написать функцию find_word_in_circle(circle, word), которая должна возвращать позицию, 
с которой нужно начинать чтение (индекс в строке) и направление чтения (1 если слева направо 
или -1 если справа налево), если студент может найти строку word в круговой строке circle, и -1 иначе. 
Строка word содержит как минимум один символ.

Формат ввода
find_word_in_circle('napo', 'ap')

Формат вывода
1 1

Примечания
На проверку необходимо отправить файл find_word_in_circle.py с функцией find_word_in_circle(circle, word)


get_new_dictionary

В файле input_dict_name находится человеко-драконий словарь. В первой строке словаря записано 
число слов,к которым есть перевод. Затем на каждой строке словаря располагается слов и один или 
несколько переводов к нему. Слово и его переводы разделены дефисом, переводы одного слова 
разделены запятой. Дефис отделён от соседних слов пробельными символами. После запятой ставится 
пробельный символ. Функция get_new_dictionary(input_dict_name, output_dict_name) должна по 
человеко-драконьему словарю, находящемуся в input_dict_name, построить драконе-человечий словарь 
и сохранить его в файл с именем output_dict_name в аналогичном исходному словарю формате. 
Словарь должен быть полным, т.е. учитывать всю информацию, которая находилась в исходном словаре. 
Строки выходного словаря должны быть отсортированы в лексикографическом порядке.

Формат ввода
Файл 'input.txt':
5
cat - kosha
dog - soba
good - horo, normo
bad - ploh, uzha
ugly - uzha

Формат вывода
Файл 'output.txt':
6
horo - good
kosha - cat
normo - good
ploh - bad
soba - dog
uzha - bad, ugly

Примечания
На проверку необходимо отправить файл get_new_dictionary.py с функцией 
get_new_dictionary(input_dict_name, output_dict_name).
