Полиномы:

Реализуйте модуль `polynomial`, задающий класс `Polynomial`, задающий полином. 
Метод `__init__` класса принимает бесконечное число аргументов, каждый из которых 
является соответствующим коэффициентом полинома. Объект класса моделирует конкретный полином. 
При вызове объекта класса от вещественной переменной `x`, возвращается значение полинома в точке `x`.

——————————————————————————————————————————————–

Пример правильной работы кода:

# зададим полином x*x + 3x + 2
my_polynom = Polynomial(2, 3, 1)
print(my_polynom(4))

30

——————————————————————————————————————————————–

Замечание. Допускается написать реализацию `Polynomial` без использования классов с помощью функций.


Разреженные матрицы:

Реализуйте класс разреженной матрицы `CooSparseMatrix` с координатным форматом хранения. 
В памяти должны хранится только ненулевые элементы матрицы!

——————————————————————————————————————————————–

1. Метод `__init__` класса принимает два аргумента:
* ijx_list — список кортежей (i, j, x), i,j - положение элемента в матрице, x - значение элемента.
* shape — кортеж из двух элементов, размер матрицы

Если в списке встречаются одинаковые индексы, необходимо выбросить исключение TypeError

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))

——————————————————————————————————————————————–

2. Необходимо реализовать простую индексацию матриц. При вызове matrix[i] необходимо вернуть объект `CooSparseMatrix`, соответствующий i-ой строки исходной матрице и имеющий размер 1 на количество столбцов в матрице. При вызове matrix[i, j] необходимо вернуть [i, j] элемент матрицы. Также реализуйте возможность присвоить [i,j] элементу матрицы вещественное число.

> matrix1 = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))
> to_array(matrix1[0])

array([[1., 0.]])

> matrix1[0, 0]

1

> matrix1[1, 2] = 2
> matrix1[1, 2]

2

——————————————————————————————————————————————–

Замечание. 
Также рекомендуется реализовать для себя функцию или метод to_array, преобразующий 
разреженную матрицу в numpy ndarray. Так как на проверяющем сервере нет библиотеки
numpy, при засылке файла с импортом numpy будет происходить ошибка.

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))
> to_array(matrix)

array([[1., 0.], [2., 0.]])

——————————————————————————————————————————————–
